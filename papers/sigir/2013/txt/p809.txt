Time-aware Structured Query Suggestion

Taiki Miyanishi

∗

Graduate School of System Informatics

Kobe University, Japan

miyanishi@ai.cs.kobe-u.ac.jp

Tetsuya Sakai

Microsoft Research Asia, China

tetsuyasakai@acm.org

ABSTRACT
Most commercial search engines have a query suggestion fea-
ture, which is designed to capture various possible search in-
tents behind the user’s original query. However, even though
diﬀerent search intents behind a given query may have been
popular at diﬀerent time periods in the past, existing query
suggestion methods neither utilize nor present such infor-
mation. In this study, we propose Time-aware Structured
Query Suggestion (TaSQS) which clusters query suggestions
along a timeline so that the user can narrow down his search
from a temporal point of view. Moreover, when a suggested
query is clicked, TaSQS presents web pages from query-URL
bipartite graphs after ranking them according to the click
counts within a particular time period. Our experiments us-
ing data from a commercial search engine log show that the
time-aware clustering and the time-aware document ranking
features of TaSQS are both eﬀective.

Categories and Subject Descriptors
H.3.3 [Information Storage and Retrieval]: Information
Search and Retrieval

Keywords
time-aware information retrieval, query suggestion

1.

INTRODUCTION

Query suggestion is an important feature of web search
engines [3, 5, 7, 8]. Together with query autocompletion
that presents related queries within the search box in real
time [1, 9], a list of query suggestions shown within the
search engine result page often helps the user reformulate
his query easily and eﬀectively. However, even though dif-
ferent search intents behind a given query may have been
popular at diﬀerent time periods in the past, existing query
suggestion methods neither utilize nor present such informa-
tion. As Li and Croft [6] point out, topically relevant but
obsolete documents may not satisfy the user if he is seeking
∗This work was done while the author was at Microsoft Re-
search Asia.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGIR’13, July 28–August 1, 2013, Dublin, Ireland.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2034-4/13/07 ...$15.00.

Table 1: Example of query suggestions in response
to a query “romney 2012”

Flat list

TaSQS

romney momentum
romney surge
romney losing
why romney
obama romney women poll
romney on the economy
romney and massachusetts
romney obama 2012
romney how web
romney and binder
romney and women
women for romney
romney on economy
romney economy
romney debate performance

Oct 01 2012 - Oct 11 2012
romney losing
why romney is losing
romney chance to beat obama
lenore romney
economists pick romney
Oct 12 2012 - Oct 18 2012
romney west virginia
romney on education
google romney
Oct 19 2012 - Oct 28 2012
romney women
romney slogan
opinion obama romney
romney women binder
women for romney
Oct 29 2012 - Oct 30 2012
romney momentum
Oct 31 2012
romney indiana

recent information. More importantly, even relevant and re-
cent documents may not satisfy the user if he is interested
in a speciﬁc time period in the past. Some search engines let
the user specify a time range together with his search query.
However, in order to enjoy such a feature, the user needs to
ﬁgure out a correct time range, and to explicitly provide it
to the search engine.

In this paper, we introduce Time-aware Structured Query
Suggestion (TaSQS), an algorithm for presenting query sug-
gestions along a timeline and helping the user access relevant
web pages. TaSQS leverages query-URL bipartite graphs
to determine time ranges with diﬀerent durations for dif-
ferent query suggestions, and frees the user from the bur-
den of entering a speciﬁc time constraint with a query. We
call this feature time-aware query clustering. Table 1 con-
trasts a standard “ﬂat-list” query suggestions and the query
suggestions that TaSQS presents, based on a commercial
search engine log from October 1-31, 2012. If the user se-
lects “romney losing” from the ﬂat-list query suggestions, a
typical search engine would just return a web search result
for this query.
In contrast, if the same query is selected
on the TaSQS interface, TaSQS interprets this as the user’s
interest in this query for the speciﬁc time period of Octo-
ber 1-11, 2012, and presents corresponding web pages from
query-URL bipartite graphs after ranking them according
to the click counts within that particular time period. We
call this feature time-aware document ranking.

The objective of the present study is to validate the time-
aware query clustering and time-aware document ranking

809features of TaSQS. To this end, we evaluate the retrieval ef-
fectiveness of the ranked web pages provided by TaSQS, un-
der the assumption that the user is able to select a query sug-
gestion appropriate for his information need on the TaSQS
interface like the one shown in Table 1. Our results show
that the time-aware query clustering and the time-aware
document ranking are both eﬀective.

2. RELATED WORK

While ﬂat-list query suggestion is the current de facto

standard in commercial web search engines, several researchers
have proposed to organize and present query suggestions.
For example, Sadikov et al. [8] proposed an algorithm to
cluster query suggestions based on clickthrough and session
data; Guo et al. [3] proposed a method to provide a label
for each query suggestion cluster based on social annota-
tion data; Kato et al. [5] proposed a query suggestion al-
gorithm that presents labeled query suggestion clusters so
that the user can make comparisons across multiple entities
(e.g. company names). Clustering queries is probably use-
ful for the user to see the relationship across the suggested
queries; labeling each cluster is probably useful for the user
to see what each cluster represents and how it is related to
the original query. However, none of these structured query
suggestion methods provide a temporal point of view.

Shokouhi and Radinsky [9] proposed a time-sensitive query
autocompletion method based on the idea of Bar-Yossef and
Kraus [1], which ranks candidate queries according to fore-
casted frequencies rather than past popularity. However,
their method is not intended for the problem we are tack-
ling, namely, to organize suggested queries along a timeline
and to let the user focus on a particular time range without
specifying an explicit time constraint.

3. PROPOSED METHOD

Time-aware Structured Query Suggestion (TaSQS) is an
algorithm for presenting query suggestions along a timeline
and helping the user access relevant web pages. It consists of
four main steps: generating query suggestions, time-aware
query clustering, time-aware query selection and time-aware
document ranking. We describe these steps below.

3.1 Generating Query Suggestions

In this step, we can plug in any existing algorithm for gen-
erating suggested queries for an input query. In the present
study, we use a popular query suggestion algorithm pro-
posed by Mei et al [7]. First, we construct a query-URL
bipartite graph for each day, where queries and URLs are
nodes and the weight of each edge corresponds to the click
count w(q, u, t), the number of times URL u ∈ U is clicked
by users with query q ∈ Q within a time period t (one day
in our case). For every query pair, we compute the hitting
time of a random walk, deﬁned as the expected number of
steps it takes from a query to another on the bipartite graph,
which indicates the “closeness” between the given query and
a query suggestion candidate. We take the top L queries
based on hitting time and use them as query suggestions:
we let L = 1000 for all of the methods examined in this
study.

To obtain the relevance score of a query suggestion, we
shift and normalize the hitting time into the [0, 1] range and
then subtract it from 1. The resultant relevance score for the
initial query q, a query suggestion q′ for a time period t is

Algorithm 1 TA-Clustering(M )
Input: A set of relevance score vectors R = {xt1 , xt2 , . . . , xtn }
Output: A cluster set C that contains no more than M clusters
1: C ← ∅
2: for xti ∈ R do
3:
C ← C ∪ {xti }
4: end for
5: while (|C| > M ) and

(maxCi6=Cj ∈CTA-Similarity(Ci, Cj ) > 0) do
hCi, Cj i ← argmaxCi6=Cj ∈C TA-Similarity(Ci, Cj )
Ci ← Ci ∪ Cj ; C ← C − Cj

6:
7:
8: end while
9: return C

denoted by er(q, q′, t). Furthermore, to smooth the relevance
scores, we use the moving average using φ preceding days
i=0 er(q, q′, t − i). In
for each t as follows: r(q, q′, t) = 1
this paper, we let φ = 3 based on a pilot experiment.

φ Pφ−1

3.2 Time-aware Query Clustering

To accommodate the users’ diverse needs from a tempo-
ral point of view, we perform query clustering so that each
cluster represents a group of query suggestions that were
popular at a particular time period in the past. To this end,
we modify a popular Hierarchical Agglomerative Clustering
(HAC) algorithm that iteratively ﬁnds a pair of clusters that
are the most similar and merges them.

1, rt

m],

We denote a vector of relevance scores as xt = [rt

2, . . . , rt
where m is the number of generated query suggestions and
each element is the aforementioned relevance score rt
j =
r(q, qj , t). The input to our clustering algorithm is a set
of relevance score vectors R = {xt1 , xt2 , . . . , xtn }, where n
denotes the number of time periods (days in this study) con-
sidered by TaSQS. For example, t1, t2, . . . , tn means October
1-31 when TaSQS clusters the vectors in October. To incor-
porate time-awareness into the similarity calculation of the
HAC algorithm, we use the notion of temporal adjacency: for
example, a cluster that spans May 10-12 and one that spans
May 13-21 are temporally adjacent. Thus, we deﬁne the
time-aware similarity between two clusters Ci and Cj as fol-
lows: TA-Similarity(Ci, Cj) = 1
xk · xl
if Ci is temporally adjacent to Cj, TA-Similarity(Ci, Cj) = 0
otherwise. Thus, only temporally adjacent clusters can be
merged. Algorithm 1 shows our time-aware query clustering
algorithm, from which we obtain no more than M clusters.
In this study, we let M = 5, as showing more than ﬁve
clusters on a web search interface may not be realistic.

|Ci||Cj | Pxk∈Ci Pxl∈Cj

3.3 Time-aware Query Selection

After clustering, we need to select query suggestions from
the clusters for presentation. These presented query sug-
gestions are used for accessing the corresponding web pages
based on the query-URL bipartite graphs, and the time pe-
riods associated with the suggestions are used for ranking
these pages. Thus we need to select a set of representa-
tive and diverse query suggestions from the clusters to ac-
commodate diverse search needs. For this, we rank query
suggestions in descending order of the following time-aware
score:

TA-Score(q, q′) = λR(q, q′, C) − (1 − λ)R(q, q′, ¯C),

(1)
where q′ is a query suggestion, ¯C = {xti ∈ I : xti 6∈ C},
|C| P{t:xt∈C} r(q, q′, t), λ is a parameter (0 <
R(q, q′, C) = 1

810Table 2: Examples of search topics used in our experiments. The relevance assessors did not have access to
the specialized query and target time ﬁelds highlighted in gray.

Initial query

Specialized query

avengers

scarlett johansson avengers

euro 2012
olympics

euro 2012 spain vs portugal
missy franklin 2012 olympics

Description
Find Scarlett Johansson talking about playing Black Widow in
“The Avengers”
Find information about the Euro 2012 semiﬁnal Spain vs. Portugal
Jun. 27, 2012
Find Missy Franklin’s comments on the Summer Olympics in 2012 Aug. 19, 2012

Target time
May 4, 2012

λ < 1) that determines the balance between the average
relevance score for query suggestion q′ over cluster C and
that for q′ over the complement of C. Thus, the TA-Score
for a given query suggestion and a cluster is high when its
average relevance score over that cluster is high while its
average relevance score over the complement of that cluster
is low. We set λ to 0.4 based on a preliminary experiment.
In addition, we take the top N query suggestions according
to TA-Score for presentation. In this study, we let N = 15
(See Table 1).

3.4 Time-aware Document Ranking

The ﬁnal step of TaSQS is to present a ranked list of
web pages in response to the user’s click on a suggested
query, by leveraging the query-URL bipartite graphs. As a
speciﬁc time period is tied to each suggested query in the
TaSQS interface, we assume that the user is interested in
that suggested query within the context of that particular
time period. More speciﬁcally, we assume that the user is
interested in documents that were frequently clicked within
that speciﬁc time period.

We have two methods to rank the web pages u available
from the query-URL bipartite graphs. The ﬁrst is to rank
them by the overall popularity of the cluster C ′ to which the
selected query suggestion q belongs:

POP(u, q, C ′) = X

{t:xt∈C ′}

w(q, u, t).

(2)

Recall that w(q, u, t) denotes a click count within the time
period t. Based on the above method, “constantly popu-
lar” web pages such as Wikipedia are always ranked high.
However, what we really want to accomplish is to favor web
pages that were particularly popular within the speciﬁc time
period. To this end, our second method ranks web pages by
relative popularity:

rPOP(u, q, C ′) = P{t:xt∈C ′} w(q, u, t)

w(q, u)

,

(3)

where w(q, u) = Pt w(q, u, t).
4. EVALUATION

This section reports on a laboratory experiment for eval-
uating the time-aware query clustering and the time-aware
document ranking features of TaSQS in terms of the retrieval
eﬀectiveness of the ranked lists generated by TaSQS.

4.1 Experimental Setup
Click data. We evaluate TaSQS using Microsoft Bing’s
query log from May 1 to October 31, 2012, where each record
consists of a query and a clicked URL. In the preprocessing
step, we removed redundant white spaces, punctuations and
queries that were longer than 100 characters from the data.
URLs more than 300 characters long were also removed.
In addition, we ﬁltered out queries and URLs related to

adult contents, as well as queries with fewer than ﬁve clicks
per day. As a result, we obtained 5,348,081 unique queries,
54,445,091 unique URLs, and 75,488,967 query-URL pairs.
Moreover, we partitioned the query-URL pairs by day to
form query-URL-date triples for each day. The ﬁnal data
set consists of 648,047,630 triples, which has an average of
3,580,374 triples per day.

For generating query suggestions, we constructed the query-

URL bipartite graphs for each day and obtained 183 bipar-
tite graphs. Moreover, from each bipartite graph, we ex-
tracted a subgraph that consists of queries that contain a
term from the initial query. This was used for generating
query suggestions for all of the methods examined in this
paper.

Search topics. To evaluate the eﬀect of our proposed
time-based ranking method, we constructed 47 search topics
which consists of four parts: initial query, specialized query,
description, and target time. Table 2 shows a few examples
of the search topics used in our experiments. For example,
the ﬁrst entry in the table represents a search scenario where
the user is looking for information from around May 4, 2012
on Scarlett Johansson talking about playing Black Widow
in the movie “The Avengers” and starts out with the initial
query “avengers.” What we want to evaluate in this study
is the retrieval eﬀectiveness of the ranked list of web pages
provided by TaSQS, assuming that the user actually clicks
the specialized query in the query suggestion interface.

We constructed the search topics as follows. First, to con-
struct realistic search topics that align well with our click
data from 2012, we selected queries that resulted in a click on
a Wikipedia page whose title contained “2012.” For example,
the initial query “avengers” was selected because it had clicks
on the Wikipedia page “The Avengers (2012).” Then, we
compared the monthly frequencies of each initial query be-
tween May and October 2012 to determine the “peak month”
for it. For example, the peak month for “avengers” was May.
We then manually selected a specialized query (i.e. one that
subsumes the initial query) from the “torso” queries within
the peak month, and deﬁned its target time as the day when
the specialized query was most frequently used within the
peak month. In our example, “scarlett johansson avengers”
was selected as the specialized query, and its target time
is deﬁned as May 4. Finally, we manually formulated the
description ﬁelds by examining some web pages that were
frequently clicked during the target time.

Relevance assessments. To conduct retrieval eﬀective-
ness evaluation, we hired nineteen assessors with computer
science skills as relevance assessors. We pooled top ﬁve web
pages from all of the methods described in Section 4.2 for
each of our search topics, and obtained a total of 716 doc-
uments to be judged. Each of the pooled documents were
judged by two diﬀerent assessors on a two-point scale (rele-
vant or nonrelevant); the inter-assessor agreement was mod-
erate (Cohen’s kappa: 0.501). Finally, we consolidated the

811Table 3: IR performances by diﬀerent methods. The best performing run is indicated in bold and statistically
signiﬁcant diﬀerences are marked using the symbols in the top-right corner of each method name.

Method
POP♣
GOOGLE♦
EqualSplit + rPOP♥
TA-Clustering + POP♠
TA-Clustering + rPOP

nDCG@1 ERR@1

0.624
0.652
0.709
0.660
0.780♣
♦

0.117
0.121
0.133
0.124
0.146♣
♦

RR@1
0.809
0.809
0.809
0.830

0.936♣♥

♦

nDCG@3 ERR@3

0.640
0.726
0.681
0.637
0.740♣
♠

0.201
0.223
0.217
0.202
0.234♣
♠

RR@3
0.887
0.879
0.89
0.901
0.954♦
♥

nDCG@5 ERR@5

0.645
0.723
0.700
0.662
0.744♣
♠

0.235
0.257
0.255
0.239
0.271♣
♠

RR@5
0.887
0.890
0.894
0.901
0.954♥

two sets of assessments to form graded relevance assessments
as follows: 2=highly relevant (judged relevant by both as-
sessors); 1=relevant (judged relevant by just one assessor);
and 0=nonrelevant (judged nonrelevant by both assessors).

Evaluation measures. To evaluate retrieval eﬀectiveness,
we use normalized discounted cumulative gain (nDCG) [4],
expected reciprocal rank (ERR) [2] and reciprocal rank (RR).
nDCG and ERR consider graded relevance while RR does
not. Thus RR treats both highly relevant and relevant doc-
uments as “just relevant.” We discuss statistical signiﬁcance
of results using a two-tailed paired t-test with p < 0.05
throughout this paper.

4.2 Baselines

TaSQS ﬁrst conducts time-aware query clustering, and if
a resultant query suggestion is clicked by the user, it ranks
the search results based on the popularity or the relative
popularity (Eqs. 2 and 3). We denote these two versions
as TA-Clustering + POP and TA-Clustering + rPOP, respec-
tively.

To evaluate TaSQS, we also prepared several baseline meth-
ods. Our ﬁrst baseline, POP, does not involve query clus-
tering, but ranks retrieved documents based on the popu-
larity (i.e. click count) statistics from May 1 to October 31.
This can be compared with TA-Clustering + POP which uses
the popularity information within the time period to which
the clicked query belongs. Our second baseline, GOOGLE,
also does not involve query clustering, but simply uses the
Google Custom Search API1 with May 1-Oct 31 as the time
constraint. Finally, our third baseline, EqualSplit + rPOP,
divides each month equally instead of applying time-aware
clustering. For example, October is divided into 1-6, 7-12,
13-18, 19-24, and 25-31 as ﬁve clusters. By comparing this
with TA-Clustering + rPOP, we can quantify the beneﬁt of
ﬂexibly determining time periods based on time-aware query
clustering.

For each method, we assume that the user has clicked the
specialized query of each topic, and evaluate the correspond-
ing ranked list of web pages. For TA-Clustering + POP, TA-
Clustering + nPOP and EqualSplit + nPOP, we assume that
the user is able to select the correct “peak month” (i.e. the
month that covers the target time of the topic) and a clus-
ter that covers the target time among ﬁve clusters using the
query suggestion interface: the responsibility of the meth-
ods being evaluated is to present query suggestions along the
timeline within that month (e.g. October in Table 1) and
to present ranked web pages when one of the suggestions in
that cluster is clicked.

4.3 Experimental Results

Table 3 shows the nDCG, ERR and RR performances
of the ﬁve methods at document cutoﬀs 1, 3 and 5, with

1https://developers.google.com/custom-search/

statistical signiﬁcance test results. It can be observed that
TA-Clustering + rPOP signiﬁcantly outperforms other meth-
ods. More speciﬁcally, it signiﬁcantly outperforms POP and
GOOGLE in terms of many evaluation measures, which sug-
gests that the combination of time-aware query clustering
and document ranking based on the relative popularity is
eﬀective. Moreover, it signiﬁcantly outperforms EqualSplit
+ rPOP in terms of RR at cutoﬀs 1, 3 and 5, which suggests
that our time-aware query clustering approach which deter-
mines variable-length time periods is eﬀective. Furthermore,
as it signiﬁcantly outperforms TA-Clustering + POP in terms
of nDCG and ERR at cutoﬀs 3 and 5, it appears that the
relative popularity is more eﬀective than the raw popularity:
documents clicked frequently within a particular period in
time are more useful than those that are constantly popular
(See Eqs. 2 and 3).

5. CONCLUSION

In this study, we evaluated the retrieval eﬀectiveness of
ranked web pages produced by Time-aware Structured Query
Suggestion (TaSQS), which ﬁrst clusters query suggestions
from a temporal point of view and then presents web pages
from query-URL bipartite graphs after ranking them ac-
cording to their popularity within a speciﬁc time period.
Through retrieval eﬀectiveness evaluation, we showed the
eﬀectiveness of time-aware query clustering (i.e. obtaining
ﬂexible time periods for diﬀerent query suggestions) and that
of time-aware document ranking (i.e. presenting web pages
based on their popularity within a speciﬁc time period). In
addition, TaSQS outperformed simple baselines including
Google search with a time constraint. We plan to evalu-
ate TaSQS in the context of real user search tasks in future
work.
6. REFERENCES
[1] Z. Bar-Yossef and N. Kraus. Context-sensitive query

auto-completion. In WWW, pages 107–116, 2011.

[2] O. Chapelle, D. Metlzer, Y. Zhang, and P. Grinspan.

Expected reciprocal rank for graded relevance. In CIKM,
pages 621–630, 2009.

[3] J. Guo, X. Cheng, G. Xu, and H. Shen. A structured

approach to query recommendation with social annotation
data. In CIKM, pages 619–628, 2010.

[4] K. J¨arvelin and J. Kek¨al¨ainen. Cumulated gain-based

evaluation of IR techniques. TOIS, 20(4):422–446, 2002.
[5] M. P. Kato, T. Sakai, and K. Tanaka. Structured query

suggestion for specialization and parallel movement: eﬀect
on search behaviors. In WWW, pages 389–398, 2012.

[6] X. Li and W. Croft. Time-based language models. In CIKM,

pages 469–475, 2003.

[7] Q. Mei, D. Zhou, and K. Church. Query suggestion using

hitting time. In CIKM, pages 469–478, 2008.

[8] E. Sadikov, J. Madhavan, L. Wang, and A. Halevy.

Clustering query reﬁnements by user intent. In WWW,
pages 841–850, 2010.

[9] M. Shokouhi and K. Radinsky. Time-sensitive query

auto-completion. In SIGIR, pages 601–610, 2012.

812